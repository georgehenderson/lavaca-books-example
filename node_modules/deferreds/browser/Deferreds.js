window["Deferreds"] = (function() {
	
/**
 * almond 0.2.0 Copyright (c) 2011, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        aps = [].slice;

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);

                name = baseParts.concat(name.split("/"));

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (waiting.hasOwnProperty(name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!defined.hasOwnProperty(name) && !defining.hasOwnProperty(name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (typeof callback === 'function') {

            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (defined.hasOwnProperty(depName) ||
                           waiting.hasOwnProperty(depName) ||
                           defining.hasOwnProperty(depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback.apply(defined[name], args);

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 15);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        config = cfg;
        return req;
    };

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        waiting[name] = [name, deps, callback];
    };

    define.amd = {
        jQuery: true
    };
}());

define("node_modules/grunt-amd-dist/tasks/lib/almond", function(){});

define('mout/lang/kindOf',[],function () {

    var _rKind = /^\[object (.*)\]$/,
        _toString = Object.prototype.toString,
        UNDEF;

    /**
     * Gets the "kind" of value. (e.g. "String", "Number", etc)
     */
    function kindOf(val) {
        if (val === null) {
            return 'Null';
        } else if (val === UNDEF) {
            return 'Undefined';
        } else {
            return _rKind.exec( _toString.call(val) )[1];
        }
    }
    return kindOf;
});

define('mout/lang/toArray',['./kindOf'], function (kindOf) {

    var _win = this;

    /**
     * Convert array-like object into array
     */
    function toArray(val){
        var ret = [],
            kind = kindOf(val),
            n;

        if (val != null) {
            if ( val.length == null || kind === 'String' || kind === 'Function' || kind === 'RegExp' || val === _win ) {
                //string, regexp, function have .length but user probably just want
                //to wrap value into an array..
                ret[ret.length] = val;
            } else {
                //window returns true on isObject in IE7 and may have length
                //property. `typeof NodeList` returns `function` on Safari so
                //we can't use it (#58)
                n = val.length;
                while (n--) {
                    ret[n] = val[n];
                }
            }
        }
        return ret;
    }
    return toArray;
});

define('mout/function/partial',[],function () {

    function slice(arr, offset){
        return Array.prototype.slice.call(arr, offset || 0);
    }

    /**
     * Creates a partially applied function.
     */
    function partial(fn, var_args){
        var argsArr = slice(arguments, 1); //curried args
        return function(){
            return fn.apply(this, argsArr.concat(slice(arguments)));
        };
    }

    return partial;

});

define('mout/lang/isKind',['./kindOf'], function (kindOf) {
    /**
     * Check if value is from a specific "kind".
     */
    function isKind(val, kind){
        return kindOf(val) === kind;
    }
    return isKind;
});

define('mout/lang/isFunction',['./isKind'], function (isKind) {
    /**
     */
    function isFunction(val) {
        return isKind(val, 'Function');
    }
    return isFunction;
});

(function (global, undefined) {
    

    var tasks = (function () {
        function Task(handler, args) {
            this.handler = handler;
            this.args = args;
        }
        Task.prototype.run = function () {
            // See steps in section 5 of the spec.
            if (typeof this.handler === "function") {
                // Choice of `thisArg` is not in the setImmediate spec; `undefined` is in the setTimeout spec though:
                // http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html
                this.handler.apply(undefined, this.args);
            } else {
                var scriptSource = "" + this.handler;
                /*jshint evil: true */
                eval(scriptSource);
            }
        };

        var nextHandle = 1; // Spec says greater than zero
        var tasksByHandle = {};
        var currentlyRunningATask = false;

        return {
            addFromSetImmediateArguments: function (args) {
                var handler = args[0];
                var argsToHandle = Array.prototype.slice.call(args, 1);
                var task = new Task(handler, argsToHandle);

                var thisHandle = nextHandle++;
                tasksByHandle[thisHandle] = task;
                return thisHandle;
            },
            runIfPresent: function (handle) {
                // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
                // So if we're currently running a task, we'll need to delay this invocation.
                if (!currentlyRunningATask) {
                    var task = tasksByHandle[handle];
                    if (task) {
                        currentlyRunningATask = true;
                        try {
                            task.run();
                        } finally {
                            delete tasksByHandle[handle];
                            currentlyRunningATask = false;
                        }
                    }
                } else {
                    // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
                    // "too much recursion" error.
                    global.setTimeout(function () {
                        tasks.runIfPresent(handle);
                    }, 0);
                }
            },
            remove: function (handle) {
                delete tasksByHandle[handle];
            }
        };
    }());

    function canUseNextTick() {
        // Don't get fooled by e.g. browserify environments.
        return typeof process === "object" &&
               Object.prototype.toString.call(process) === "[object process]";
    }

    function canUseMessageChannel() {
        return !!global.MessageChannel;
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.

        if (!global.postMessage || global.importScripts) {
            return false;
        }

        var postMessageIsAsynchronous = true;
        var oldOnMessage = global.onmessage;
        global.onmessage = function () {
            postMessageIsAsynchronous = false;
        };
        global.postMessage("", "*");
        global.onmessage = oldOnMessage;

        return postMessageIsAsynchronous;
    }

    function canUseReadyStateChange() {
        return "document" in global && "onreadystatechange" in global.document.createElement("script");
    }

    function installNextTickImplementation(attachTo) {
        attachTo.setImmediate = function () {
            var handle = tasks.addFromSetImmediateArguments(arguments);

            process.nextTick(function () {
                tasks.runIfPresent(handle);
            });

            return handle;
        };
    }

    function installMessageChannelImplementation(attachTo) {
        var channel = new global.MessageChannel();
        channel.port1.onmessage = function (event) {
            var handle = event.data;
            tasks.runIfPresent(handle);
        };
        attachTo.setImmediate = function () {
            var handle = tasks.addFromSetImmediateArguments(arguments);

            channel.port2.postMessage(handle);

            return handle;
        };
    }

    function installPostMessageImplementation(attachTo) {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var MESSAGE_PREFIX = "com.bn.NobleJS.setImmediate" + Math.random();

        function isStringAndStartsWith(string, putativeStart) {
            return typeof string === "string" && string.substring(0, putativeStart.length) === putativeStart;
        }

        function onGlobalMessage(event) {
            // This will catch all incoming messages (even from other windows!), so we need to try reasonably hard to
            // avoid letting anyone else trick us into firing off. We test the origin is still this window, and that a
            // (randomly generated) unpredictable identifying prefix is present.
            if (event.source === global && isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {
                var handle = event.data.substring(MESSAGE_PREFIX.length);
                tasks.runIfPresent(handle);
            }
        }
        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        attachTo.setImmediate = function () {
            var handle = tasks.addFromSetImmediateArguments(arguments);

            // Make `global` post a message to itself with the handle and identifying prefix, thus asynchronously
            // invoking our onGlobalMessage listener above.
            global.postMessage(MESSAGE_PREFIX + handle, "*");

            return handle;
        };
    }

    function installReadyStateChangeImplementation(attachTo) {
        attachTo.setImmediate = function () {
            var handle = tasks.addFromSetImmediateArguments(arguments);

            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var scriptEl = global.document.createElement("script");
            scriptEl.onreadystatechange = function () {
                tasks.runIfPresent(handle);

                scriptEl.onreadystatechange = null;
                scriptEl.parentNode.removeChild(scriptEl);
                scriptEl = null;
            };
            global.document.documentElement.appendChild(scriptEl);

            return handle;
        };
    }

    function installSetTimeoutImplementation(attachTo) {
        attachTo.setImmediate = function () {
            var handle = tasks.addFromSetImmediateArguments(arguments);

            global.setTimeout(function () {
                tasks.runIfPresent(handle);
            }, 0);

            return handle;
        };
    }

    if (!global.setImmediate) {
        // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
        var attachTo = typeof Object.getPrototypeOf === "function" && "setTimeout" in Object.getPrototypeOf(global) ?
                          Object.getPrototypeOf(global)
                        : global;

        if (canUseNextTick()) {
            // For Node.js before 0.9
            installNextTickImplementation(attachTo);
        } else if (canUsePostMessage()) {
            // For non-IE10 modern browsers
            installPostMessageImplementation(attachTo);
        } else if (canUseMessageChannel()) {
            // For web workers, where supported
            installMessageChannelImplementation(attachTo);
        } else if (canUseReadyStateChange()) {
            // For IE 6–8
            installReadyStateChangeImplementation(attachTo);
        } else {
            // For older browsers
            installSetTimeoutImplementation(attachTo);
        }

        attachTo.clearImmediate = tasks.remove;
    }
}(typeof global === "object" && global ? global : this));

define("setimmediate", function(){});

define('deferreds/isPromise',[],function() {

	


	var isPromise = function(obj) {
		return obj && typeof obj.then === 'function';
	};


	return isPromise;

});

define('deferreds/Promise',[],function() {

	


	/**
	 * @class
	 * @param {Deferred} deferred
	 */
	var Promise = function(deferred) {
		this._deferred = deferred;
	};


	/**
	 * @return {Deferred.State}
	 */
	Promise.prototype.state = function() {
		return this._deferred._state;
	};

	/**
	 * @param {Function} doneCallback
	 * @param {Function} [failCallback]
	 * @param {Function} [progressCallback]
	 * @return this
	 */
	Promise.prototype.then = function() {
		return this._deferred.then.apply(this._deferred, arguments);
	};


	/**
	 * @param {Function} callback
	 * @return this
	 */
	Promise.prototype.done = function() {
		this._deferred.done.apply(this._deferred, arguments);
		return this;
	};


	/**
	 * @param {Function} callback
	 * @return this
	 */
	Promise.prototype.fail = function() {
		this._deferred.fail.apply(this._deferred, arguments);
		return this;
	};


	/**
	 * @param {Function} callback
	 * @return this
	 */
	Promise.prototype.always = function() {
		this._deferred.always.apply(this._deferred, arguments);
		return this;
	};


	return Promise;

});

/*global setImmediate */
define('deferreds/Deferred',['require','mout/lang/toArray','mout/lang/isFunction','setimmediate','./isPromise','./Promise'],function(require) {

	


	var toArray = require('mout/lang/toArray');
	var isFunction = require('mout/lang/isFunction');
	require('setimmediate');

	var isPromise = require('./isPromise');
	var Promise = require('./Promise');


	/**
	 * @class
	 */
	var Deferred = function() {
		if (!(this instanceof Deferred)) {
			throw new Error('Deferred constructor function must be called with the "new" keyword');
		}

		this._state = Deferred.State.PENDING;
		this._callbacks = {
			fulfilled: [],
			rejected: []
		};
		this._closingArguments = [];
		this._promise = new Promise(this);
	};


	/**
	 * @return {Promise}
	 */
	Deferred.prototype.promise = function() {
		return this._promise;
	};


	/**
	 * @return {Deferred.State}
	 */
	Deferred.prototype.state = function() {
		return this._state;
	};


	Deferred.prototype._drainCallbacks = function() {
		if (this._isDrainPending) {
			return;
		}
		this._isDrainPending = true;

		setImmediate(function() {
			this._isDrainPending = false;

			var callbacks;

			switch (this._state) {
				case Deferred.State.FULFILLED:
					callbacks = this._callbacks.fulfilled;
					this._callbacks.rejected = [];
					break;
				case Deferred.State.REJECTED:
					callbacks = this._callbacks.rejected;
					this._callbacks.fulfilled = [];
					break;
				default:
					return;
			}

			try {
				while (callbacks.length) {
					callbacks.shift().apply(undefined, this._closingArguments);
				}
			}
			catch (e) {
				this.reject(e);
			}
		}.bind(this));
	};


	Deferred.prototype._setState = function(state, args) {
		if (this._state !== Deferred.State.PENDING) {
			return this;
		}

		this._state = state;
		this._closingArguments = args;
		this._drainCallbacks();
		return this;
	};


	/**
	 * @param {...Any} args
	 * @return this
	 */
	Deferred.prototype.resolve = function() {
		return this._setState(Deferred.State.FULFILLED, arguments);
	};


	/**
	 * @param {...Any} args
	 * @return this
	 */
	Deferred.prototype.reject = function() {
		return this._setState(Deferred.State.REJECTED, arguments);
	};


	/**
	 * @param {Function} doneCallback
	 * @param {Function} [failCallback]
	 * @return this
	 */
	Deferred.prototype.then = function(onFulfilled, onRejected) {
		var piped = new Deferred();

		this.done(function callFulfilled() {
			if (this._state === Deferred.State.FULFILLED && !isFunction(onFulfilled)) {
				//edge case of Promises/A+ 3.2.6.4 (that's why it looks like one)
				piped.resolve.apply(piped, this._closingArguments);
			}
			else {
				var args = [onFulfilled].concat(toArray(arguments));
				Deferred.fromAny.apply(undefined, args)
					.done(piped.resolve.bind(piped))
					.fail(piped.reject.bind(piped));
			}
		}.bind(this));

		this.fail(function callRejected() {
			if (this._state === Deferred.State.REJECTED && !isFunction(onRejected)) {
				//edge case of Promises/A+ 3.2.6.5 (that's why it looks like one)
				piped.reject.apply(piped, this._closingArguments);
			}
			else {
				var args = [onRejected].concat(toArray(arguments));
				Deferred.fromAny.apply(undefined, args)
					.done(piped.resolve.bind(piped))
					.fail(piped.reject.bind(piped));
			}
		}.bind(this));

		return piped.promise();
	};


	/**
	 * @param {Function} onFulfilled
	 * @param {Function} onRejected
	 * @return this
	 */
	Deferred.prototype._addCallbacks = function(onFulfilled, onRejected) {
		if (onFulfilled) {
			this._callbacks.fulfilled.push(onFulfilled);
		}

		if (onRejected) {
			this._callbacks.rejected.push(onRejected);
		}

		if (this._state !== Deferred.State.PENDING) {
			this._drainCallbacks();
		}

		return this;
	};


	/**
	 * @param {Function} callback
	 * @return this
	 */
	Deferred.prototype.done = function(onFulfilled) {
		return this._addCallbacks(onFulfilled);
	};


	/**
	 * @param {Function} callback
	 * @return this
	 */
	Deferred.prototype.fail = function(onRejected) {
		return this._addCallbacks(undefined, onRejected);
	};


	/**
	 * @param {Function} callback
	 * @return this
	 */
	Deferred.prototype.always = function(callback) {
		return this._addCallbacks(callback, callback);
	};


	/**
	 * @enum {String}
	 * @const
	 */
	Deferred.State = {
		PENDING: 'pending',
		FULFILLED: 'fulfilled',
		REJECTED: 'rejected'
	};


	/**
	 * Monad `return` equivalent
	 * @param {Any} obj
	 * @return {Deferred}
	 */
	Deferred.fromAny = function(obj) {
		if (isPromise(obj)) {
			if (obj instanceof Deferred || obj instanceof Promise) {
				return obj;
			}
			else {
				var deferred = new Deferred();
				obj.then(
					deferred.resolve.bind(deferred),
					deferred.reject.bind(deferred)
				);
				return deferred.promise();
			}
		}
		else if (isFunction(obj)) {
			//any arguments after obj will be passed to obj()
			var args = Array.prototype.slice.call(arguments, 1);
			var result;
			try {
				result = obj.apply(obj, args);
			}
			catch (e) {
				return new Deferred().reject(e).promise();
			}
			return Deferred.fromAny(result);
		}
		else {
			return new Deferred().resolve(obj).promise();
		}
	};


	return Deferred;

});

define('deferreds/forEach',['require','./Deferred'],function(require) {

	


	var Deferred = require('./Deferred');


	/**
	 * Invoke `iterator` once for each function in `list`
	 * @param {Array|Object} list
	 * @param {Function} iterator
	 * @return {Promise}
	 */
	var forEach = function(list, iterator) {

		var superDeferred = new Deferred();

		if (!list.length) {
			superDeferred.resolve();
			return superDeferred.promise();
		}

		var completed = 0;
		list.forEach(function(item, i) {
			Deferred.fromAny(iterator(item, i, list))
				.then(
					function() {
						completed++;
						if (completed === list.length) {
							superDeferred.resolve();
						}
					},
					function() {
						superDeferred.reject.apply(superDeferred, arguments);
					}
				);
		});

		return superDeferred.promise();

	};


	return forEach;

});

define('deferreds/every',['require','./Deferred','./forEach'],function(require) {

	


	var Deferred = require('./Deferred');
	var forEach = require('./forEach');


	/**
	 * Returns `true` if all values in `list` pass `iterator` truth test
	 * @param {Array|Object} list
	 * @param {Function} iterator
	 * @return {Promise}
	 */
	var every = function(list, iterator) {

		return forEach(list, function(item, i, list) {
			return Deferred.fromAny(iterator(item, i, list))
				.then(function(result) {
					if (!result) {
						throw 'break';
					}
				});
		}).then(
			function() {
				return true;
			},
			function(err) {
				if (err === 'break') {
					return false;
				}
				throw err;
			}
		);

	};


	return every;

});

define('deferreds/filter',['require','./Deferred','./forEach'],function(require) {

	


	var Deferred = require('./Deferred');
	var forEach = require('./forEach');


	/**
	 * Returns an array of all values in `list` which pass `iterator` truth
	 * test
	 * @param {Array} list
	 * @param {Function} iterator
	 * @return {Promise}
	 */
	var filter = function(list, iterator) {

		var results = [];

		return forEach(list, function(item, i) {
			return Deferred.fromAny(iterator(item, i, list))
				.then(function(result) {
					if (result === true) {
						results.splice(i, 0, item);
					}
				});
		}).then(function() {
			return results;
		});

	};


	return filter;

});

define('deferreds/forEachSeries',['require','./Deferred'],function(require) {

	


	var Deferred = require('./Deferred');


	/**
	 * Version of forEach which is guaranteed to execute passed functions in
	 * order.
	 * @param {Array} list
	 * @param {Function} iterator
	 * @return {Promise}
	 */
	var forEachSeries = function(list, iterator) {

		var superDeferred = new Deferred();

		if (!list.length) {
			superDeferred.resolve();
			return superDeferred.promise();
		}

		var completed = 0;

		var iterate = function() {
			Deferred.fromAny(iterator(list[completed], completed, list))
				.then(
					function() {
						completed += 1;
						if (completed === list.length) {
							superDeferred.resolve();
						}
						else {
							iterate();
						}
					},
					function() {
						superDeferred.reject.apply(superDeferred, arguments);
					}
				);
		};
		iterate();

		return superDeferred.promise();

	};


	return forEachSeries;

});

define('deferreds/filterSeries',['require','./Deferred','./forEachSeries'],function(require) {

	


	var Deferred = require('./Deferred');
	var forEachSeries = require('./forEachSeries');


	/**
	 * Version of filter which is guaranteed to process items in order
	 * @param {Array} list
	 * @param {Function} iterator
	 * @return {Promise}
	 */
	var filterSeries = function(list, iterator) {

		var results = [];

		return forEachSeries(list, function(item, i) {
			return Deferred.fromAny(iterator(item, i, list))
				.then(function(result) {
					if (result === true) {
						results.splice(i, 0, item);
					}
				});
		}).then(function() {
			return results;
		});

	};


	return filterSeries;

});

define('deferreds/find',['require','./Deferred','./forEach'],function(require) {

	


	var Deferred = require('./Deferred');
	var forEach = require('./forEach');


	/**
	 * Returns the first value in `list` matching the `iterator` truth test
	 * @param {Array} list
	 * @param {Function} iterator
	 * @return {Promise}
	 */
	var find = function(list, iterator) {

		var found;

		return forEach(list, function(item, i) {
			return Deferred.fromAny(iterator(item, i, list))
				.then(function(result) {
					if (result) {
						found = item;
						throw 'break';
					}
				});
		}).then(
			function() {
				return found;
			},
			function(err) {
				if (err === 'break') {
					return found;
				}
				throw err;
			}
		);

	};


	return find;

});

define('deferreds/findSeries',['require','./Deferred','./forEachSeries'],function(require) {

	


	var Deferred = require('./Deferred');
	var forEachSeries = require('./forEachSeries');


	/**
	 * Version of find which is guaranteed to process items in order
	 * @param {Array} list
	 * @param {Function} iterator
	 * @return {Promise}
	 */
	var findSeries = function(list, iterator) {

		var found;

		return forEachSeries(list, function(item, i) {
			return Deferred.fromAny(iterator(item, i, list))
				.then(function(result) {
					if (result) {
						found = item;
						throw 'break';
					}
				});
		}).then(
			function() {
				return found;
			},
			function(err) {
				if (err === 'break') {
					return found;
				}
				throw err;
			}
		);

	};


	return findSeries;

});

define('deferreds/isDeferred',[],function() {

	


	var isDeferred = function(obj) {
		return obj && obj.promise;
	};

	return isDeferred;

});

define('deferreds/map',['require','./Deferred','./forEach'],function(require) {

	


	var Deferred = require('./Deferred');
	var forEach = require('./forEach');


	/**
	 * Produces a new Array by mapping each item in `list` through the
	 * transformation function `iterator`.
	 * @param {Array} list
	 * @param {Function} iterator
	 * @return {Promise}
	 */
	var map = function(list, iterator) {

		var results = [];

		return forEach(list, function(item, i) {
			return Deferred.fromAny(iterator(item, i, list))
				.then(function(transformed) {
					results[i] = transformed;
				});
		}).then(function() {
			return results;
		});

	};


	return map;

});

define('deferreds/mapSeries',['require','./Deferred','./forEachSeries'],function(require) {

	


	var Deferred = require('./Deferred');
	var forEachSeries = require('./forEachSeries');


	/**
	 * Version of map which is guaranteed to process items in order
	 * @param {Array|Object} list
	 * @param {Function} iterator
	 * @return {Promise}
	 */
	var mapSeries = function(list, iterator) {

		var superDeferred = new Deferred();
		var results = [];

		forEachSeries(list, function(item, i) {
			return Deferred.fromAny(iterator(item, i, list))
				.then(
					function(transformed) {
						results[i] = transformed;
					}
				);
		}).then(
			function() {
				superDeferred.resolve(results);
			},
			function() {
				superDeferred.reject.apply(superDeferred, arguments);
			}
		);

		return superDeferred.promise();

	};


	return mapSeries;

});

define('deferreds/parallel',['require','./Deferred','./map'],function(require) {

	


	var Deferred = require('./Deferred');
	var map = require('./map');


	/**
	 * Executes all passed Functions in parallel.
	 * @param {Array} tasks
	 * @return {Promise}
	 */
	var parallel = function(tasks) {

		return map(tasks, function(task) {
			return Deferred.fromAny(task);
		});

	};


	return parallel;

});

define('deferreds/pipe',['require','mout/function/partial','./Deferred','mout/lang/toArray'],function(require) {

	


	var partial = require('mout/function/partial');

	var Deferred = require('./Deferred');
	var toArray = require('mout/lang/toArray');


	/**
	 * Executes all passed Functions one at a time, each time passing the
	 * result to the next function in the chain.
	 * @param {Any} tasks
	 * @return {Promise}
	 */
	var pipe = function(tasks) {

		var superDeferred = new Deferred();
		var completed = 0;

		var iterate = function() {
			var args = toArray(arguments);
			var task = tasks[completed];
			args.unshift(task);
			Deferred.fromAny( partial.apply(task, args) )
				.then(
					function() {
						completed++;
						if (completed === tasks.length) {
							superDeferred.resolve.apply(superDeferred, arguments);
						}
						else {
							iterate.apply(superDeferred, arguments);
						}
					},
					function() {
						superDeferred.reject.apply(superDeferred, arguments);
					}
				);
		};

		iterate();

		return superDeferred.promise();

	};


	return pipe;

});

define('deferreds/reduce',['require','./Deferred','./forEachSeries'],function(require) {

	


	var Deferred = require('./Deferred');
	var forEachSeries = require('./forEachSeries');


	/**
	 * Boils a `list` of values into a single value.
	 * @param {Array|Object} list
	 * @param {Function} iterator
	 * @param {Any} memo
	 * @return {Promise}
	 */
	var reduce = function(list, iterator, memo) {

		return forEachSeries(list, function(item, key) {
			return Deferred.fromAny(iterator(memo, item, key, list))
				.then(function(result) {
					memo = result;
				});
		}).then(function() {
			return memo;
		});

	};


	return reduce;

});

define('deferreds/reduceRight',['require','./reduce'],function(require) {

	


	var reduce = require('./reduce');


	/**
	 * Right-associative version of reduce; eqivalent to reversing a list and
	 * then running reduce on it.
	 * @param {Array|Object} list
	 * @param {Function} iterator
	 * @param {Any} memo
	 * @return {Promise}
	 */
	var reduceRight = function(list, iterator, memo) {
		return reduce(list.slice().reverse(), iterator, memo);
	};


	return reduceRight;

});

define('deferreds/series',['require','./Deferred','./mapSeries'],function(require) {

	


	var Deferred = require('./Deferred');
	var mapSeries = require('./mapSeries');


	/**
	 * Executes all passed Functions one at a time.
	 * @param {Array} tasks
	 * @return {Promise}
	 */
	var series = function(tasks) {

		return mapSeries(tasks, function(task) {
			return Deferred.fromAny(task);
		});

	};


	return series;

});

define('deferreds/some',['require','./Deferred','./forEach'],function(require) {

	


	var Deferred = require('./Deferred');
	var forEach = require('./forEach');


	/**
	 * Returns `true` if any values in `list` pass `iterator` truth test
	 * @param {Array} list
	 * @param {Function} iterator
	 * @return {Promise}
	 */
	var some = function(list, iterator) {

		return forEach(list, function(item, i) {
			return Deferred.fromAny(iterator(item, i, list))
				.then(function(result) {
					if (result) {
						throw 'break';
					}
				});
		}).then(
			function() {
				return false;
			},
			function(err) {
				if (err === 'break') {
					return true;
				}
				throw err;
			}
		);

	};


	return some;

});

define('mout/lang/isObject',['./isKind'], function (isKind) {
    /**
     */
    function isObject(val) {
        return isKind(val, 'Object');
    }
    return isObject;
});

define('mout/object/hasOwn',[],function () {

    /**
     * Safer Object.hasOwnProperty
     */
     function hasOwn(obj, prop){
         return Object.prototype.hasOwnProperty.call(obj, prop);
     }

     return hasOwn;

});

define('mout/object/forIn',[],function () {

    var _hasDontEnumBug,
        _dontEnums;

    function checkDontEnum(){
        _dontEnums = [
                'toString',
                'toLocaleString',
                'valueOf',
                'hasOwnProperty',
                'isPrototypeOf',
                'propertyIsEnumerable',
                'constructor'
            ];

        _hasDontEnumBug = true;

        for (var key in {'toString': null}) {
            _hasDontEnumBug = false;
        }
    }

    /**
     * Similar to Array/forEach but works over object properties and fixes Don't
     * Enum bug on IE.
     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
     */
    function forIn(obj, fn, thisObj){
        var key, i = 0;
        // no need to check if argument is a real object that way we can use
        // it for arrays, functions, date, etc.

        //post-pone check till needed
        if (_hasDontEnumBug == null) checkDontEnum();

        for (key in obj) {
            if (exec(fn, obj, key, thisObj) === false) {
                break;
            }
        }

        if (_hasDontEnumBug) {
            while (key = _dontEnums[i++]) {
                // since we aren't using hasOwn check we need to make sure the
                // property was overwritten
                if (obj[key] !== Object.prototype[key]) {
                    if (exec(fn, obj, key, thisObj) === false) {
                        break;
                    }
                }
            }
        }
    }

    function exec(fn, obj, key, thisObj){
        return fn.call(thisObj, obj[key], key, obj);
    }

    return forIn;

});

define('mout/object/forOwn',['./hasOwn', './forIn'], function (hasOwn, forIn) {

    /**
     * Similar to Array/forEach but works over object properties and fixes Don't
     * Enum bug on IE.
     * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
     */
    function forOwn(obj, fn, thisObj){
        forIn(obj, function(val, key){
            if (hasOwn(obj, key)) {
                return fn.call(thisObj, obj[key], key, obj);
            }
        });
    }

    return forOwn;

});

define('mout/object/values',['./forOwn'], function (forOwn) {

    /**
     * Get object values
     */
    function values(obj) {
        var vals = [];
        forOwn(obj, function(val, key){
            vals.push(val);
        });
        return vals;
    }

    return values;

});

define('mout/array/forEach',[],function () {

    /**
     * Array forEach
     */
    function forEach(arr, callback, thisObj) {
        if (arr == null) {
            return;
        }
        var i = -1,
            len = arr.length;
        while (++i < len) {
            // we iterate over sparse items since there is no way to make it
            // work properly on IE 7-8. see #64
            if ( callback.call(thisObj, arr[i], i, arr) === false ) {
                break;
            }
        }
    }

    return forEach;

});

define('mout/function/prop',[],function () {

    /**
     * Returns a function that gets a property of the passed object
     */
    function prop(name){
        return function(obj){
            return obj[name];
        };
    }

    return prop;

});

define('mout/lang/isArray',['./isKind'], function (isKind) {
    /**
     */
    var isArray = Array.isArray || function (val) {
        return isKind(val, 'Array');
    };
    return isArray;
});

define('mout/object/deepMatches',['./forOwn', '../lang/isArray'], function(forOwn, isArray) {

    function containsMatch(array, pattern) {
        var i = -1, length = array.length;
        while (++i < length) {
            if (deepMatches(array[i], pattern)) {
                return true;
            }
        }

        return false;
    }

    function matchArray(target, pattern) {
        var i = -1, patternLength = pattern.length;
        while (++i < patternLength) {
            if (!containsMatch(target, pattern[i])) {
                return false;
            }
        }

        return true;
    }

    function matchObject(target, pattern) {
        var result = true;
        forOwn(pattern, function(val, key) {
            if (!deepMatches(target[key], val)) {
                // Return false to break out of forOwn early
                return (result = false);
            }
        });

        return result;
    }

    /**
     * Recursively check if the objects match.
     */
    function deepMatches(target, pattern){
        if (target && typeof target === 'object') {
            if (isArray(target) && isArray(pattern)) {
                return matchArray(target, pattern);
            } else {
                return matchObject(target, pattern);
            }
        } else {
            return target === pattern;
        }
    }

    return deepMatches;

});

define('mout/function/makeIterator_',['./prop', '../object/deepMatches'], function(prop, deepMatches) {

    /**
     * Converts argument into a valid iterator.
     * Used internally on most array/object/collection methods that receives a
     * callback/iterator providing a shortcut syntax.
     */
    function makeIterator(src, thisObj){
        switch(typeof src) {
            case 'object':
                // typeof null == "object"
                return (src != null)? function(val, key, target){
                    return deepMatches(val, src);
                } : src;
            case 'string':
            case 'number':
                return prop(src);
            case 'function':
                if (typeof thisObj === 'undefined') {
                    return src;
                } else {
                    return function(val, i, arr){
                        return src.call(thisObj, val, i, arr);
                    };
                }
            default:
                return src;
        }
    }

    return makeIterator;

});

define('mout/array/map',['./forEach', '../function/makeIterator_'], function (forEach, makeIterator) {

    /**
     * Array map
     */
    function map(arr, callback, thisObj) {
        callback = makeIterator(callback, thisObj);
        var results = [];
        if (arr == null){
            return results;
        }

        var i = -1, len = arr.length;
        while (++i < len) {
            results[i] = callback(arr[i], i, arr);
        }

        return results;
    }

     return map;
});

define('mout/collection/map',['../lang/isObject', '../object/values', '../array/map', '../function/makeIterator_'], function (isObject, values, arrMap, makeIterator) {

    /**
     * Map collection values, returns Array.
     */
    function map(list, callback, thisObj) {
        callback = makeIterator(callback, thisObj);
        // list.length to check array-like object, if not array-like
        // we simply map all the object values
        if( isObject(list) && list.length == null ){
            list = values(list);
        }
        return arrMap(list, function (val, key, list) {
            return callback(val, key, list);
        });
    }

    return map;

});

define('mout/collection/pluck',['./map'], function (map) {

    /**
     * Extract a list of property values.
     */
    function pluck(list, key) {
        return map(list, function(value) {
            return value[key];
        });
    }

    return pluck;

});

define('deferreds/sortBy',['require','mout/collection/pluck','./Deferred','./map'],function(require) {

	


	var pluck = require('mout/collection/pluck');

	var Deferred = require('./Deferred');
	var map = require('./map');


	/**
	 * Produces a sorted copy of `list`, ranked by the results of running each
	 * item through `iterator`
	 * @param {Array} list
	 * @param {Function} iterator
	 * @return {Promise}
	 */
	var sortBy = function(list, iterator) {

		return map(list, function(item, i) {
			return Deferred.fromAny(iterator(item, i, list))
				.then(function(criteria) {
					return {
						index: i,
						value: item,
						criteria: criteria
					};
				});
		}).then(
			function(result) {
				result = result.sort(function(left, right) {
					var a = left.criteria;
					var b = right.criteria;

					if (a !== b) {
						if (a > b || a === undefined) {
							return 1;
						}
						if (a < b || b === undefined) {
							return -1;
						}
					}

					if (left.index < right.index) {
						return -1;
					}

					return 1;
				});

				return pluck(result, 'value');
			}
		);

	};


	return sortBy;

});

define('deferreds/whilst',['require','./Deferred'],function(require) {

	


	var Deferred = require('./Deferred');


	/**
	 * Repeatedly runs `iterator` until the result of `test` is false.
	 * @param {Function} test
	 * @param {Function} iterator
	 * @return {Promise}
	 */
	var whilst = function(test, iterator) {

		var superDeferred = new Deferred();

		var runTest = function(test, iterator) {
			Deferred.fromAny(test()).then(
				function(result) {
					if (result) {
						runIterator(test, iterator);
					}
					else {
						superDeferred.resolve();
					}
				},
				function() {
					superDeferred.reject.apply(superDeferred, arguments);
				}
			);
		};

		var runIterator = function(test, iterator) {
			Deferred.fromAny(iterator()).then(
				function() {
					runTest(test, iterator);
				},
				function() {
					superDeferred.reject.apply(superDeferred, arguments);
				}
			);
		};

		runTest(test, iterator);

		return superDeferred.promise();

	};


	return whilst;

});

define('deferreds/Deferreds',['require','./every','./filter','./filterSeries','./find','./findSeries','./forEach','./forEachSeries','./isDeferred','./isPromise','./map','./mapSeries','./parallel','./pipe','./reduce','./reduceRight','./series','./some','./sortBy','./whilst'],function(require) {

	


	/** @namespace */
	var Deferreds = {
		'every': require('./every'),
		'filter': require('./filter'),
		'filterSeries': require('./filterSeries'),
		'find': require('./find'),
		'findSeries': require('./findSeries'),
		'forEach': require('./forEach'),
		'forEachSeries': require('./forEachSeries'),
		'isDeferred': require('./isDeferred'),
		'isPromise': require('./isPromise'),
		'map': require('./map'),
		'mapSeries': require('./mapSeries'),
		'parallel': require('./parallel'),
		'pipe': require('./pipe'),
		'reduce': require('./reduce'),
		'reduceRight': require('./reduceRight'),
		'series': require('./series'),
		'some': require('./some'),
		'sortBy': require('./sortBy'),
		'whilst': require('./whilst')
	};


	return Deferreds;

});

define('deferreds/Chainable',['require','mout/lang/toArray','mout/function/partial','./Deferred','./Promise','./Deferreds'],function(require) {

	


	var toArray = require('mout/lang/toArray');
	var partial = require('mout/function/partial');

	var Deferred = require('./Deferred');
	var Promise = require('./Promise');
	var Deferreds = require('./Deferreds');


	/**
	 * @class
	 * @extends {Deferred}
	 * @param {Any} [wrapped]
	 */
	var Chainable = function(value) {
		if (!(this instanceof Chainable)) {
			throw new Error('Chainable constructor function must be called with the "new" keyword');
		}

		this._state = Deferred.State.PENDING;
		this._callbacks = {
			fulfilled: [],
			rejected: []
		};
		this._closingArguments = [];
		this._promise = new Promise(this);

		//special: pass "undefined" for internal use in then().
		//this prevents resolve() from being called until then() has resolved.
		if (arguments.length === 1 && value === undefined) {
			return this;
		}

		Deferred.fromAny(value).then(
			this.resolve.bind(this)
		);
	};


	Chainable.prototype = Object.create(Deferred.prototype);
	Chainable.prototype.constructor = Chainable;


	[
		'every',
		'filter',
		'filterSeries',
		'find',
		'findSeries',
		'forEach',
		'forEachSeries',
		'map',
		'mapSeries',
		'pipe',
		'reduce',
		'reduceRight',
		'some',
		'sortBy'
	].forEach(function(key) {
		Chainable.prototype[key] = function() {
			var args = toArray(arguments);

			return this.then(function(prev) {
				if (prev !== undefined) {
					args.unshift(prev);
				}
				return Deferreds[key].apply(undefined, args);
			});
		};
	});


	['parallel', 'series'].forEach(function(key) {
		Chainable.prototype[key] = function(tasks) {
			return this.then(function(prev) {
				tasks = tasks.map(function(task) {
					return partial(task, prev);
				});
				return Deferreds[key].call(undefined, tasks);
			});
		};
	});


	/**
	 * @override
	 * @return {Chainable}
	 */
	Chainable.prototype.then = function() {
		var chain = new Chainable(undefined);
		Deferred.prototype.then.apply(this, arguments).then(
			chain.resolve.bind(chain),
			chain.reject.bind(chain)
		);
		return chain;
	};


	return Chainable;


	/**
	 * @name Chainable#every
	 * @method
	 * @param {Function} iterator
	 * @return {Chainable}
	 */

	/**
	 * @name Chainable#filter
	 * @method
	 * @param {Function} iterator
	 * @return {Chainable}
	 */

	/**
	 * @name Chainable#filterSeries
	 * @method
	 * @param {Function} iterator
	 * @return {Chainable}
	 */

	/**
	 * @name Chainable#find
	 * @method
	 * @param {Function} iterator
	 * @return {Chainable}
	 */

	/**
	 * @name Chainable#findSeries
	 * @method
	 * @param {Function} iterator
	 * @return {Chainable}
	 */

	/**
	 * @name Chainable#forEach
	 * @method
	 * @param {Function} iterator
	 * @return {Chainable}
	 */

	/**
	 * @name Chainable#forEachSeries
	 * @method
	 * @param {Function} iterator
	 * @return {Chainable}
	 */

	/**
	 * @name Chainable#map
	 * @method
	 * @param {Function} iterator
	 * @return {Chainable}
	 */

	/**
	 * @name Chainable#mapSeries
	 * @method
	 * @param {Function} iterator
	 * @return {Chainable}
	 */

	/**
	 * @name Chainable#parallel
	 * @method
	 * @param {Any} tasks
	 * @return {Chainable}
	 */

	/**
	 * @name Chainable#reduce
	 * @method
	 * @param {Function} iterator
	 * @param {Any} memo
	 * @return {Chainable}
	 */

	/**
	 * @name Chainable#reduceRight
	 * @method
	 * @param {Function} iterator
	 * @param {Any} memo
	 * @return {Chainable}
	 */

	/**
	 * @name Chainable#series
	 * @method
	 * @param {Any} tasks
	 * @return {Chainable}
	 */

	/**
	 * @name Chainable#some
	 * @method
	 * @param {Function} iterator
	 * @return {Chainable}
	 */

	/**
	 * @name Chainable#sortBy
	 * @method
	 * @param {Function} iterator
	 * @return {Chainable}
	 */

});

/*jslint onevar:true, undef:true, newcap:true, regexp:true, bitwise:true, maxerr:50, indent:4, white:false, nomen:false, plusplus:false */
/*global define:false, require:false, exports:false, module:false, signals:false */

/** @license
 * JS Signals <http://millermedeiros.github.com/js-signals/>
 * Released under the MIT license
 * Author: Miller Medeiros
 * Version: 1.0.0 - Build: 268 (2012/11/29 05:48 PM)
 */

(function(global){

    // SignalBinding -------------------------------------------------
    //================================================================

    /**
     * Object that represents a binding between a Signal and a listener function.
     * <br />- <strong>This is an internal constructor and shouldn't be called by regular users.</strong>
     * <br />- inspired by Joa Ebert AS3 SignalBinding and Robert Penner's Slot classes.
     * @author Miller Medeiros
     * @constructor
     * @internal
     * @name SignalBinding
     * @param {Signal} signal Reference to Signal object that listener is currently bound to.
     * @param {Function} listener Handler function bound to the signal.
     * @param {boolean} isOnce If binding should be executed just once.
     * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).
     * @param {Number} [priority] The priority level of the event listener. (default = 0).
     */
    function SignalBinding(signal, listener, isOnce, listenerContext, priority) {

        /**
         * Handler function bound to the signal.
         * @type Function
         * @private
         */
        this._listener = listener;

        /**
         * If binding should be executed just once.
         * @type boolean
         * @private
         */
        this._isOnce = isOnce;

        /**
         * Context on which listener will be executed (object that should represent the `this` variable inside listener function).
         * @memberOf SignalBinding.prototype
         * @name context
         * @type Object|undefined|null
         */
        this.context = listenerContext;

        /**
         * Reference to Signal object that listener is currently bound to.
         * @type Signal
         * @private
         */
        this._signal = signal;

        /**
         * Listener priority
         * @type Number
         * @private
         */
        this._priority = priority || 0;
    }

    SignalBinding.prototype = {

        /**
         * If binding is active and should be executed.
         * @type boolean
         */
        active : true,

        /**
         * Default parameters passed to listener during `Signal.dispatch` and `SignalBinding.execute`. (curried parameters)
         * @type Array|null
         */
        params : null,

        /**
         * Call listener passing arbitrary parameters.
         * <p>If binding was added using `Signal.addOnce()` it will be automatically removed from signal dispatch queue, this method is used internally for the signal dispatch.</p>
         * @param {Array} [paramsArr] Array of parameters that should be passed to the listener
         * @return {*} Value returned by the listener.
         */
        execute : function (paramsArr) {
            var handlerReturn, params;
            if (this.active && !!this._listener) {
                params = this.params? this.params.concat(paramsArr) : paramsArr;
                handlerReturn = this._listener.apply(this.context, params);
                if (this._isOnce) {
                    this.detach();
                }
            }
            return handlerReturn;
        },

        /**
         * Detach binding from signal.
         * - alias to: mySignal.remove(myBinding.getListener());
         * @return {Function|null} Handler function bound to the signal or `null` if binding was previously detached.
         */
        detach : function () {
            return this.isBound()? this._signal.remove(this._listener, this.context) : null;
        },

        /**
         * @return {Boolean} `true` if binding is still bound to the signal and have a listener.
         */
        isBound : function () {
            return (!!this._signal && !!this._listener);
        },

        /**
         * @return {boolean} If SignalBinding will only be executed once.
         */
        isOnce : function () {
            return this._isOnce;
        },

        /**
         * @return {Function} Handler function bound to the signal.
         */
        getListener : function () {
            return this._listener;
        },

        /**
         * @return {Signal} Signal that listener is currently bound to.
         */
        getSignal : function () {
            return this._signal;
        },

        /**
         * Delete instance properties
         * @private
         */
        _destroy : function () {
            delete this._signal;
            delete this._listener;
            delete this.context;
        },

        /**
         * @return {string} String representation of the object.
         */
        toString : function () {
            return '[SignalBinding isOnce:' + this._isOnce +', isBound:'+ this.isBound() +', active:' + this.active + ']';
        }

    };


/*global SignalBinding:false*/

    // Signal --------------------------------------------------------
    //================================================================

    function validateListener(listener, fnName) {
        if (typeof listener !== 'function') {
            throw new Error( 'listener is a required param of {fn}() and should be a Function.'.replace('{fn}', fnName) );
        }
    }

    /**
     * Custom event broadcaster
     * <br />- inspired by Robert Penner's AS3 Signals.
     * @name Signal
     * @author Miller Medeiros
     * @constructor
     */
    function Signal() {
        /**
         * @type Array.<SignalBinding>
         * @private
         */
        this._bindings = [];
        this._prevParams = null;

        // enforce dispatch to aways work on same context (#47)
        var self = this;
        this.dispatch = function(){
            Signal.prototype.dispatch.apply(self, arguments);
        };
    }

    Signal.prototype = {

        /**
         * Signals Version Number
         * @type String
         * @const
         */
        VERSION : '1.0.0',

        /**
         * If Signal should keep record of previously dispatched parameters and
         * automatically execute listener during `add()`/`addOnce()` if Signal was
         * already dispatched before.
         * @type boolean
         */
        memorize : false,

        /**
         * @type boolean
         * @private
         */
        _shouldPropagate : true,

        /**
         * If Signal is active and should broadcast events.
         * <p><strong>IMPORTANT:</strong> Setting this property during a dispatch will only affect the next dispatch, if you want to stop the propagation of a signal use `halt()` instead.</p>
         * @type boolean
         */
        active : true,

        /**
         * @param {Function} listener
         * @param {boolean} isOnce
         * @param {Object} [listenerContext]
         * @param {Number} [priority]
         * @return {SignalBinding}
         * @private
         */
        _registerListener : function (listener, isOnce, listenerContext, priority) {

            var prevIndex = this._indexOfListener(listener, listenerContext),
                binding;

            if (prevIndex !== -1) {
                binding = this._bindings[prevIndex];
                if (binding.isOnce() !== isOnce) {
                    throw new Error('You cannot add'+ (isOnce? '' : 'Once') +'() then add'+ (!isOnce? '' : 'Once') +'() the same listener without removing the relationship first.');
                }
            } else {
                binding = new SignalBinding(this, listener, isOnce, listenerContext, priority);
                this._addBinding(binding);
            }

            if(this.memorize && this._prevParams){
                binding.execute(this._prevParams);
            }

            return binding;
        },

        /**
         * @param {SignalBinding} binding
         * @private
         */
        _addBinding : function (binding) {
            //simplified insertion sort
            var n = this._bindings.length;
            do { --n; } while (this._bindings[n] && binding._priority <= this._bindings[n]._priority);
            this._bindings.splice(n + 1, 0, binding);
        },

        /**
         * @param {Function} listener
         * @return {number}
         * @private
         */
        _indexOfListener : function (listener, context) {
            var n = this._bindings.length,
                cur;
            while (n--) {
                cur = this._bindings[n];
                if (cur._listener === listener && cur.context === context) {
                    return n;
                }
            }
            return -1;
        },

        /**
         * Check if listener was attached to Signal.
         * @param {Function} listener
         * @param {Object} [context]
         * @return {boolean} if Signal has the specified listener.
         */
        has : function (listener, context) {
            return this._indexOfListener(listener, context) !== -1;
        },

        /**
         * Add a listener to the signal.
         * @param {Function} listener Signal handler function.
         * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).
         * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)
         * @return {SignalBinding} An Object representing the binding between the Signal and listener.
         */
        add : function (listener, listenerContext, priority) {
            validateListener(listener, 'add');
            return this._registerListener(listener, false, listenerContext, priority);
        },

        /**
         * Add listener to the signal that should be removed after first execution (will be executed only once).
         * @param {Function} listener Signal handler function.
         * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).
         * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)
         * @return {SignalBinding} An Object representing the binding between the Signal and listener.
         */
        addOnce : function (listener, listenerContext, priority) {
            validateListener(listener, 'addOnce');
            return this._registerListener(listener, true, listenerContext, priority);
        },

        /**
         * Remove a single listener from the dispatch queue.
         * @param {Function} listener Handler function that should be removed.
         * @param {Object} [context] Execution context (since you can add the same handler multiple times if executing in a different context).
         * @return {Function} Listener handler function.
         */
        remove : function (listener, context) {
            validateListener(listener, 'remove');

            var i = this._indexOfListener(listener, context);
            if (i !== -1) {
                this._bindings[i]._destroy(); //no reason to a SignalBinding exist if it isn't attached to a signal
                this._bindings.splice(i, 1);
            }
            return listener;
        },

        /**
         * Remove all listeners from the Signal.
         */
        removeAll : function () {
            var n = this._bindings.length;
            while (n--) {
                this._bindings[n]._destroy();
            }
            this._bindings.length = 0;
        },

        /**
         * @return {number} Number of listeners attached to the Signal.
         */
        getNumListeners : function () {
            return this._bindings.length;
        },

        /**
         * Stop propagation of the event, blocking the dispatch to next listeners on the queue.
         * <p><strong>IMPORTANT:</strong> should be called only during signal dispatch, calling it before/after dispatch won't affect signal broadcast.</p>
         * @see Signal.prototype.disable
         */
        halt : function () {
            this._shouldPropagate = false;
        },

        /**
         * Dispatch/Broadcast Signal to all listeners added to the queue.
         * @param {...*} [params] Parameters that should be passed to each handler.
         */
        dispatch : function (params) {
            if (! this.active) {
                return;
            }

            var paramsArr = Array.prototype.slice.call(arguments),
                n = this._bindings.length,
                bindings;

            if (this.memorize) {
                this._prevParams = paramsArr;
            }

            if (! n) {
                //should come after memorize
                return;
            }

            bindings = this._bindings.slice(); //clone array in case add/remove items during dispatch
            this._shouldPropagate = true; //in case `halt` was called before dispatch or during the previous dispatch.

            //execute all callbacks until end of the list or until a callback returns `false` or stops propagation
            //reverse loop since listeners with higher priority will be added at the end of the list
            do { n--; } while (bindings[n] && this._shouldPropagate && bindings[n].execute(paramsArr) !== false);
        },

        /**
         * Forget memorized arguments.
         * @see Signal.memorize
         */
        forget : function(){
            this._prevParams = null;
        },

        /**
         * Remove all bindings from signal and destroy any reference to external objects (destroy Signal object).
         * <p><strong>IMPORTANT:</strong> calling any method on the signal instance after calling dispose will throw errors.</p>
         */
        dispose : function () {
            this.removeAll();
            delete this._bindings;
            delete this._prevParams;
        },

        /**
         * @return {string} String representation of the object.
         */
        toString : function () {
            return '[Signal active:'+ this.active +' numListeners:'+ this.getNumListeners() +']';
        }

    };


    // Namespace -----------------------------------------------------
    //================================================================

    /**
     * Signals namespace
     * @namespace
     * @name signals
     */
    var signals = Signal;

    /**
     * Custom event broadcaster
     * @see Signal
     */
    // alias for backwards compatibility (see #gh-44)
    signals.Signal = Signal;



    //exports to multiple environments
    if(typeof define === 'function' && define.amd){ //AMD
        define('signals',[],function () { return signals; });
    } else if (typeof module !== 'undefined' && module.exports){ //node
        module.exports = signals;
    } else { //browser
        //use string because of Google closure compiler ADVANCED_MODE
        /*jslint sub:true */
        global['signals'] = signals;
    }

}(this));

/*global setImmediate:false */
define('deferreds/Queue',['require','signals','setimmediate','./Deferred'],function(require) {

	


	var Signal = require('signals');
	require('setimmediate');

	var Deferred = require('./Deferred');


	/**
	 * Processes tasks in parallel up to `concurrency` limit, reporting events
	 * along the way.
	 * @param {Function} worker
	 * @param {Number} iterator
	 * @extends {Array}
	 * @constructs
	 */
	var Queue = function(worker, concurrency) {

		this._worker = worker;
		this._concurrency = concurrency;
		this._runningWorkers = 0;
		this._events = {
			saturated: new Signal(),
			emptied: new Signal(),
			drained: new Signal()
		};

	};


	Queue.prototype = Object.create(Array.prototype);
	Queue.prototype.constructor = Queue;


	Queue.prototype.clone = function() {
		var cloned = new Queue(this._worker, this._concurrency);
		cloned._events = this._events;
		return cloned;
	};


	Queue.prototype.start = function() {
		this._running = true;
		this.process();
	};


	Queue.prototype.stop = function() {
		this._running = false;
		this._stoppedDeferred = new Deferred();
		if (this._runningWorkers === 0) {
			this._stoppedDeferred.resolve();
		}
		return this._stoppedDeferred.promise();
	};


	Queue.prototype.on = function(key, callback) {
		this._events[key].add(callback);
	};


	Queue.prototype.off = function(key, callback) {
		this._events[key].remove(callback);
	};


	Queue.prototype.process = function() {
		setImmediate(function() {
			if (!this._running) {
				return;
			}

			if (!this.length) {
				return;
			}

			if (this._runningWorkers >= this._concurrency) {
				return;
			}

			var task = Array.prototype.shift.call(this);

			if (!this.length) {
				this._events.emptied.dispatch();
			}

			this._runningWorkers++;

			Deferred.fromAny(this._worker(task)).then(function() {
				this._runningWorkers--;
				if (this.length === 0 && this._runningWorkers === 0) {
					this._events.drained.dispatch();
				}
				if (this._stoppedDeferred && this._runningWorkers === 0) {
					this._stoppedDeferred.resolve();
				}
				this.process();
			}.bind(this));
		}.bind(this));
	};


	//Array mutator methods
	['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift']
		.forEach(function(key) {
			Queue.prototype[key] = function() {
				var ret = Array.prototype[key].apply(this, arguments);
				if (this.length === this._concurrency) {
					this._events.saturated.dispatch();
				}
				this.process();
				return ret;
			};
		});


	//Array methods returning new arrays
	['concat', 'slice', 'filter', 'map']
		.forEach(function(key) {
			Queue.prototype[key] = function() {
				var ret = Array.prototype[key].apply(this, arguments);
				var q = this.clone();
				q.push.apply(q, ret);
				return q;
			};
		});


	return Queue;

});


/*
-----------------------------------------
Global definitions for a built project
-----------------------------------------
*/

return {
	"mout/lang/kindOf": require("mout/lang/kindOf"),
	"mout/lang/toArray": require("mout/lang/toArray"),
	"mout/function/partial": require("mout/function/partial"),
	"mout/lang/isKind": require("mout/lang/isKind"),
	"mout/lang/isFunction": require("mout/lang/isFunction"),
	"setimmediate": require("setimmediate"),
	"deferreds/isPromise": require("deferreds/isPromise"),
	"deferreds/Promise": require("deferreds/Promise"),
	"deferreds/Deferred": require("deferreds/Deferred"),
	"deferreds/forEach": require("deferreds/forEach"),
	"deferreds/every": require("deferreds/every"),
	"deferreds/filter": require("deferreds/filter"),
	"deferreds/forEachSeries": require("deferreds/forEachSeries"),
	"deferreds/filterSeries": require("deferreds/filterSeries"),
	"deferreds/find": require("deferreds/find"),
	"deferreds/findSeries": require("deferreds/findSeries"),
	"deferreds/isDeferred": require("deferreds/isDeferred"),
	"deferreds/map": require("deferreds/map"),
	"deferreds/mapSeries": require("deferreds/mapSeries"),
	"deferreds/parallel": require("deferreds/parallel"),
	"deferreds/pipe": require("deferreds/pipe"),
	"deferreds/reduce": require("deferreds/reduce"),
	"deferreds/reduceRight": require("deferreds/reduceRight"),
	"deferreds/series": require("deferreds/series"),
	"deferreds/some": require("deferreds/some"),
	"mout/lang/isObject": require("mout/lang/isObject"),
	"mout/object/hasOwn": require("mout/object/hasOwn"),
	"mout/object/forIn": require("mout/object/forIn"),
	"mout/object/forOwn": require("mout/object/forOwn"),
	"mout/object/values": require("mout/object/values"),
	"mout/array/forEach": require("mout/array/forEach"),
	"mout/function/prop": require("mout/function/prop"),
	"mout/lang/isArray": require("mout/lang/isArray"),
	"mout/object/deepMatches": require("mout/object/deepMatches"),
	"mout/function/makeIterator_": require("mout/function/makeIterator_"),
	"mout/array/map": require("mout/array/map"),
	"mout/collection/map": require("mout/collection/map"),
	"mout/collection/pluck": require("mout/collection/pluck"),
	"deferreds/sortBy": require("deferreds/sortBy"),
	"deferreds/whilst": require("deferreds/whilst"),
	"deferreds/Deferreds": require("deferreds/Deferreds"),
	"deferreds/Chainable": require("deferreds/Chainable"),
	"signals": require("signals"),
	"deferreds/Queue": require("deferreds/Queue")
};


})();