{
  "name": "deferreds",
  "main": "dist/deferreds.js",
  "title": "deferreds.js",
  "description": "Functional Deferred object library",
  "version": "0.2.1",
  "homepage": "https://github.com/zship/deferreds.js",
  "author": {
    "name": "Zach Shipley",
    "email": "zach@zachshipley.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/zship/deferreds.js.git"
  },
  "license": "MIT",
  "dependencies": {
    "mout": "0.3.x"
  },
  "devDependencies": {
    "grunt": "0.4.x",
    "grunt-contrib-clean": "0.4.x",
    "grunt-contrib-qunit": "0.1.x",
    "grunt-contrib-uglify": "0.1.x",
    "grunt-contrib-jshint": "0.1.x",
    "grunt-amd-doc": "0.4.x",
    "grunt-amd-dist": "0.4.x",
    "grunt-amd-test": "0.4.x",
    "grunt-amd-checkrequire": "0.4.x"
  },
  "keywords": [],
  "readme": "Deferreds.js\n============\n\n[![Build Status](https://travis-ci.org/zship/deferreds.js.png?branch=develop)](https://travis-ci.org/zship/deferreds.js)\n\nMain documentation is [right here](http://zship.github.com/deferreds.js/)!\n\nDeferreds.js is a utility library centered around working with [Deferred\nobjects](http://wiki.commonjs.org/wiki/Promises/A). The main goal is to do for\nDeferred objects what [async.js](https://github.com/caolan/async) does for\nNode-style asynchronous functions&mdash;that is, provide many common\nhigher-order functions (map, reduce, filter, etc.) accepting\npotentially-asynchronous Deferred objects as arguments.\n\nJust like async.js, deferreds.js provides several flow control functions. To\ngive you an idea of what these look like, here's perhaps the most useful\nfunction, **pipe** (called \"waterfall\" in async.js):\n\n```js\npipe([\n    function() {\n        var deferred = new Deferred();\n        setTimeout(function() {\n            deferred.resolve('one', 'two');\n        }, 10);\n        return deferred.promise();\n    },\n    function(arg1, arg2) {\n        console.log(arg1); //> 'one'\n        console.log(arg2); //> 'two'\n\n        var deferred = new Deferred();\n        setTimeout(function() {\n            deferred.resolve({\n                arg1: arg1,\n                arg2: arg2,\n                arg3: 'three'\n            });\n        }, 10);\n        return deferred.promise();\n    },\n    function(result) {\n        console.log(result.arg1); //> 'one'\n        console.log(result.arg2); //> 'two'\n        console.log(result.arg3); //> 'three'\n\n        var deferred = new Deferred();\n        setTimeout(function() {\n            deferred.resolve(['four']);\n        }, 10);\n        return deferred.promise();\n    }\n]).then(function(result) {\n    console.log(result); //> ['four']\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/zship/deferreds.js/issues"
  },
  "_id": "deferreds@0.2.1",
  "dist": {
    "shasum": "c6c4315cb273de96f1a17fa1680c26c08e49cbf5"
  },
  "_from": "deferreds@0.2.x",
  "_resolved": "https://registry.npmjs.org/deferreds/-/deferreds-0.2.1.tgz"
}
